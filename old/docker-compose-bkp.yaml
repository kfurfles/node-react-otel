# docker-compose.yml file
version: "3.5"
services:
  # INIT KAFKA
  # zoo:
  #   image: confluentinc/cp-zookeeper:7.3.2
  #   hostname: zoo
  #   container_name: zoo
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_SERVERS: zoo:2888:3888

  # kafka:
  #   image: confluentinc/cp-kafka:7.3.2
  #   hostname: kafka
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #     - "9999:9999"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_JMX_PORT: 9999
  #     KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   depends_on:
  #     - zoo
  
  # redpanda-console:
  #   image: docker.redpanda.com/redpandadata/console:latest
  #   environment:
  #     - KAFKA_BROKERS=kafka:29092
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - kafka
  # END KAFKA

  # Postgres
  # db:
  #   image: postgres:14.1-alpine
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=1234
  #     - POSTGRES_DB=okr
  #   ports:
  #     - '5432:5432'
  #   volumes: 
  #     - ./docker/postgres:/var/lib/postgresql/data

  # MongoDB
  # mongodb:
  #   image: mongo
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - ./docker/data:/data/db

  # Using Jaeger Demo Application to generate sample data
  demo:
    image: jaegertracing/example-hotrod:1.11.0
    ports:
      - "9500:8080"
      - "8081:8081"
      - "8082:8082"
      - "8083:8083"
    networks:
      - elastic-jaeger
    restart: on-failure
    environment:
      JAEGER_AGENT_HOST: "jaeger"
      JAEGER_AGENT_PORT: 6831
    command: [ "all" ]
    depends_on:
      - jaeger

  jaeger:
    networks:
      - jaeger-prometheus
    image: jaegertracing/all-in-one:latest
    volumes:
      - "./jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
      - "16686:16686"
      - "16685:16685"

  otel_collector:
    networks:
      - jaeger-prometheus
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}"]
    ports:
     - "1888:1888"   # pprof extension
     - "13133:13133" # health_check extension
     - "4317:4317"        # OTLP gRPC receiver
     - "4318:4318"        # OTLP HTTP receiver
     - "55670:55679" # zpages extension
     - "14278:14278"
    depends_on:
      - jaeger

  prometheus:
    networks:
      - jaeger-prometheus
    image: prom/prometheus:latest
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

networks:
  jaeger-prometheus:
    driver: bridge