version: "3"

services:
  kibana:
    networks:
      - elastic-jaeger
    depends_on:
      - elasticsearch
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.9.3
    volumes:
      - ./docker/kibana:/usr/share/kibana/data
    ports:
     - 5601:5601
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    networks:
      - elastic-jaeger
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    restart: on-failure
    environment:
      - cluster.name=jaeger-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data

  # # OpenTelemetry Collector
  # otelcol:
  #   image: otel/opentelemetry-collector-contrib:0.82.0
  #   container_name: otel-col
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 125M
  #   restart: unless-stopped
  #   command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-observability.yml", "--config=/etc/otelcol-config-extras.yml" ]
  #   volumes:
  #     - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
  #     - ./otelcollector/otelcol-observability.yml:/etc/otelcol-observability.yml
  #     - ./otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
  #   ports:
  #     - "4317"          # OTLP over gRPC receiver
  #     - "4318:4318"     # OTLP over HTTP receiver
  #     - "9464"          # Prometheus exporter
  #     - "8888"          # metrics endpoint
  #   depends_on:
  #     - elasticsearch
  #   logging: *logging

  # jaeger-agent:
  #   image: jaegertracing/jaeger-agent
  #   hostname: jaeger-agent
  #   command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
  #   ports:
  #     - "5775:5775/udp"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #   networks:
  #     - elastic-jaeger
  #   restart: on-failure
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #   depends_on:
  #     - jaeger-collector

  # jaeger-query:
  #   image: jaegertracing/jaeger-query
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #     - no_proxy=localhost
  #   ports:
  #     - "16686:16686"
  #     - "16687:16687"
  #   networks:
  #     - elastic-jaeger
  #   restart: on-failure
  #   command: [
  #     "--es.server-urls=http://elasticsearch:9200",
  #     "--span-storage.type=elasticsearch",
  #     "--log-level=debug"
  #   ]
  #   depends_on:
  #     - jaeger-agent

  # # Trace Demo App
  # demo:
  #   image: jaegertracing/example-hotrod
  #   networks:
  #     - elastic-jaeger
  #   ports:
  #     - "9500:8080"
  #     - "8081:8081"
  #     - "8082:8082"
  #     - "8083:8083"
  #   restart: on-failure
  #   environment:
  #     - "--prometheus.query.support-spanmetrics-connector=true"
  #     - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger-collector:14268/api/traces
  #   command: [ "all" ]
  #   depends_on:
  #     - jaeger-collector

volumes:
  esdata:
    driver: local

networks:
  elastic-jaeger:
    driver: bridge 